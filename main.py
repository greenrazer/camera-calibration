import cv2
import numpy as np

import image_utils
import utils
import li_utils
import draw_utils

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def try1():
    train_card = image_utils.open_and_white_balance("photos/test_card.jpg")
    
    train =  image_utils.show_img_select_rois('Select Color', train_card, single=True)
    hsv_train = cv2.cvtColor(train, cv2.COLOR_BGR2HSV)
    lower, upper = image_utils.hsv_color_filter(hsv_train)

    target = image_utils.open_and_white_balance("photos/star.jpg", hsv=True)

    inv_mask = image_utils.color_filter_mask(target, lower, upper, inv=True)

    image_utils.show_image('howdi', inv_mask)
    #colors too close to one another.

    keypoints = image_utils.detect_circular_blobs(inv_mask)

    keypoint_img = cv2.drawKeypoints(target, keypoints, np.array([]), (255,255,0), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

    image_utils.show_image('howdi', cv2.cvtColor(keypoint_img, cv2.COLOR_HSV2BGR))

def try2():
    target = cv2.imread("photos/star.jpg")
    points = image_utils.show_image_select_points('Select points', target)

    target_hsv = cv2.cvtColor(target, cv2.COLOR_BGR2HSV)

    target_patch = image_utils.extract_square_patch(target, points[0], 150)
    target_patch_hsv = cv2.cvtColor(target_patch, cv2.COLOR_BGR2HSV)
    cv2.imshow('fuck', target_patch)
    
    print((points[0][0], points[0][1]))
    print(target_hsv.shape)
    point_color = target_hsv[points[0][0], points[0][1] , :]
    lower_c, upper_c = image_utils.color_hsv_epsilon(point_color, 20, 100, 255)
    mask = image_utils.color_filter_mask(target_patch_hsv, lower_c, upper_c)
    
    sw = utils.SliderWindow('square_patch')
    sw.add_image(mask)
    sw.add_slider('h_epsilon', 20)
    sw.add_slider('s_epsilon', 100)
    sw.add_slider('v_epsilon', 255)

    def on_change(obj):
        eh = obj.get_slider_value('h_epsilon')
        es = obj.get_slider_value('s_epsilon')
        ev = obj.get_slider_value('v_epsilon')

        lower_c, upper_c = image_utils.color_hsv_epsilon(point_color, eh, es, ev)
        mask = image_utils.color_filter_mask(target_patch_hsv, lower_c, upper_c)
        sw.display_img(mask)
    
    sw.add_callback(on_change)

    sw.show()

    if cv2.waitKey(0):
        cv2.destroyAllWindows()

def try3():
    vs = cv2.VideoCapture(0)

    obj_track = image_utils.ObjectTracker(draw_debug=True)

    while True:
        ret, frame = vs.read()
        
        boxes = obj_track.update(frame)

        key = cv2.waitKey(1) & 0xFF

        if key == ord("s"):
            obj_track.add_new_tracker(frame)
        if key == ord('q'):
            break        

        cv2.imshow('hi', frame)

    cv2.destroyAllWindows()

def try4():
    DIST = .33
    # mirrored x = -x y = y z = z
    real_points_m = np.array([
        [0,0,0], # White
        [DIST,0,0], # Purple
        [-DIST,0,0], # Silver
        [0,DIST,0], # Orange
        [0,-DIST,0], # Red
        [0,0,DIST], # Blue
        [0,0,-DIST], # Yellow
    ])

    # real_points_m = np.random.rand(*real_points_m.shape)
    # points = np.random.rand(real_points_m.shape[0], 2)

    colors = [
        [255,255,255], # White
        [250, 150, 150], # Purple
        [220, 220, 220], # Silver
        [0, 165, 255],  # Orange
        [0, 0, 255], # Red
        [255, 0, 0], # Blue
        [0, 255, 255], # Yellow
    ]

    imgs = [
        cv2.imread("photos/star.jpg"),
        cv2.imread("photos/star2.jpg"),
        cv2.imread("photos/star3.jpg"),
        cv2.imread("photos/star5.jpg"),
        cv2.imread("photos/star6.jpg"),
    ]

    points0 = [(0.4766666666666667, 0.4425), (0.8416666666666667, 0.7925), (0.20333333333333334, 0.2175), (0.62, 0.56125), (0.20333333333333334, 0.12375), (0.03, 0.69625), (0.9183333333333333, 0.17875)]
    points1 = [(0.51, 0.5), (0.86125, 0.58), (0.20625, 0.4125), (0.4925, 0.25125), (0.515, 0.645), (0.59125, 0.25), (0.40375, 0.83375)]
    points2 = [(0.49375, 0.59375), (0.4725, 0.69625), (0.53, 0.42125), (0.75, 0.54625), (0.2125, 0.65875), (0.4375, 0.37875), (0.58125, 0.87125)]
    points4 = [(0.53375, 0.56875), (0.54125, 0.6625), (0.5225, 0.455), (0.66125, 0.5275), (0.39875, 0.615), (0.48875, 0.485), (0.59125, 0.66625)]
    points5 = [(0.615, 0.33875), (0.68, 0.48625), (0.53375, 0.165), (0.72875, 0.2375), (0.4925, 0.45375), (0.5, 0.33625), (0.77375, 0.34125)]


    all_points = [points0, points1, points2, points4, points5]

    for num in range(len(imgs)):

        points = np.array(all_points[num])
        imag = imgs[num]

        def display(p):
            internal, rotation, position = li_utils.get_projection_product_matricies(p)

            internal, rotation = li_utils.fix_rotation_matrix(internal, rotation)
            plt = draw_utils.show_scene(real_points_m, internal, rotation, position)
        
        def draw_on_pic(P, show_projected_points=False):
            new_points = li_utils.camera_project_points(P, real_points_m)

            drawn = image_utils.draw_points_on_image(imag, new_points, radius=20, colors=colors)
            if show_projected_points:
                image_utils.show_image("howdy", drawn)
            display(P)

        P = li_utils.calibrate_camera(real_points_m, points)
        draw_on_pic(P, show_projected_points=True)

def try5():

    DIST = .33
    # mirrored x = -x y = y z = z
    real_points_m = np.array([
        [0,0,0], # White
        [DIST,0,0], # Purple
        [-DIST,0,0], # Silver
        [0,DIST,0], # Orange
        [0,-DIST,0], # Red
        [0,0,DIST], # Blue
        [0,0,-DIST], # Yellow
    ])

    # real_points_m = np.random.rand(*real_points_m.shape)
    # points = np.random.rand(real_points_m.shape[0], 2)

    colors = [
        [255,255,255], # White
        [250, 150, 150], # Purple
        [220, 220, 220], # Silver
        [0, 165, 255],  # Orange
        [0, 0, 255], # Red
        [255, 0, 0], # Blue
        [0, 255, 255], # Yellow
    ]

    color_names = [
        "white",
        "purple",
        "silver",
        "orange",
        "red",
        "blue",
        "yellow"
    ]

    vs = cv2.VideoCapture('photos/star_v.mp4')

    ret, frame = vs.read()

    # obj_track = image_utils.ObjectTracker(draw_debug=True)
    # boxes_d = []
    # for i, point3d in enumerate(real_points_m):
    #     box = obj_track.add_new_tracker(frame, window_name=color_names[i])
    #     boxes_d.append(box)
    # print(boxes_d)

    boxes = [(693, 686, 45, 60), (708, 662, 45, 36), (667, 746, 43, 48), (688, 945, 45, 50), (720, 422, 45, 62), (441, 686, 36, 48), (960, 715, 45, 50)]

    obj_track = image_utils.ObjectTracker.from_boxes(frame, boxes, draw_debug=True, colors=colors)

    boxes = obj_track.update(frame)

    np.set_printoptions(precision=2)
    np.set_printoptions(suppress=True)

    centers = np.array([image_utils.center_of_box(box) for box in boxes])
    P, P_raw = li_utils.calibrate_camera(real_points_m, centers)
    internal, rotation, position = li_utils.get_projection_product_matricies(P)
    # plt = draw_utils.show_scene(real_points_m, internal, rotation, position, colors=np.array(colors)/255)
    line = position
    internal, rotation, position = li_utils.get_projection_product_matricies(P_raw)


    while True:
        ret, frame = vs.read()
        if ret:
            boxes = obj_track.update(frame)

            scaled_im, scale = image_utils.resize_keep_aspect_ratio(frame, width=600)

            cv2.imshow('hi', scaled_im)

            centers = np.array([image_utils.center_of_box(box) for box in boxes])

            P, P_raw = li_utils.calibrate_camera(real_points_m, centers, K=internal, start_raw=P_raw)
            _, rotation, position = li_utils.get_projection_product_matricies(P)

            print(position)

            line = np.hstack([line, position])

            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
        else:
            break

    _, rotation, position = li_utils.get_projection_product_matricies(P)

    # internal = [[-1.41133503e+03,  7.42202238e+01,  5.59929679e+02],
    # [-0.00000000e+00, -1.43584049e+03,  6.21476480e+02],
    # [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]
    # rotation = [[-0.99215665, -0.11596174,  0.0466697 ],
    # [ 0.12339766, -0.9682105,   0.21758087],
    # [ 0.01995504,  0.22163324,  0.9749259 ]]
    # position = [[-0.15131388],
    # [-0.26819996],
    # [-0.78506635]]
    # line = [[-2.01296906, -1.82208221, -1.75969702, -1.56775196, -1.33552,-2.02038126
    # ,-1.54609904,-1.71516456,-1.55392577,-1.5389782,-1.64204336,-1.58995426
    # ,-1.52601232,-1.51440559,-1.5369045,-1.54162997,-1.57807244,-1.45056512
    # ,-1.54576086,-1.44047552,-1.48773319,-1.44917749,-1.48932291,-1.43838853
    # ,-1.42857913,-1.35854884,-1.39103844,-1.41694505,-1.45565854,-1.39956532
    # ,-1.42378586,-1.38479431,-1.38687414,-1.35700488,-1.38234548,-1.39360484
    # ,-1.38821268,-1.36389752,-1.36766873,-1.34449796,-1.35296072,-1.35764636
    # ,-1.34540191,-1.33371918,-1.34680309,-1.32988017,-1.3214478,-1.27206824
    # ,-1.27084117,-1.28242405,-1.26401076,-1.25276463,-1.26573998,-1.25569184
    # ,-1.2695786,-1.23864663,-1.22057782,-1.23748111,-1.23054931,-1.2299855
    # ,-1.21805541,-1.20400583,-1.21484169,-1.20723415,-1.20243234,-1.18925824
    # ,-1.17288215,-1.17658484,-1.16928607,-1.15544526,-1.14747151,-1.14007296
    # ,-1.12896864,-1.13351267,-1.10254127,-1.09317313,-1.08627236,-1.07207274
    # ,-1.05246478,-1.05025545,-1.04150597,-1.03553178,-1.03898082,-1.02099106
    # ,-1.02010066,-1.00915479,-0.99711954,-0.98896272,-0.99025591,-0.96591428
    # ,-0.95098533,-0.94982382,-0.92857802,-0.90460583,-0.89802718,-0.8891909
    # ,-0.87687462,-0.86332591,-0.8656564,-0.84567116,-0.83238364,-0.83181041
    # ,-0.82852262,-0.83370658,-0.81433922,-0.80977473,-0.80537472,-0.7935148
    # ,-0.78889514,-0.76770263,-0.76318208,-0.75425445,-0.74957611,-0.74100625
    # ,-0.73750152,-0.73392942,-0.72145117,-0.71402842,-0.71477889,-0.69539911
    # ,-0.69787465,-0.68683255,-0.67760398,-0.67206501,-0.65578322,-0.6492308
    # ,-0.64307035,-0.63845916,-0.63478141,-0.63163306,-0.62223881,-0.61434993
    # ,-0.60521248,-0.59495687,-0.5843182,-0.58385758,-0.58316298,-0.57173248
    # ,-0.57063759,-0.56185886,-0.56000788,-0.55481618,-0.55395817,-0.54485832
    # ,-0.54327957,-0.54217148,-0.53513361,-0.53482954,-0.52657528,-0.52673271
    # ,-0.5192536,-0.51404835,-0.51636287,-0.50813384,-0.50937621,-0.50336272
    # ,-0.49897979,-0.49603194,-0.4893913,-0.48307643,-0.4659006,-0.46411867
    # ,-0.45606895,-0.44560847,-0.44273577,-0.43328412,-0.42304723,-0.41619366
    # ,-0.40920443,-0.3991064,-0.39072326,-0.38670272,-0.37601741,-0.37021642
    # ,-0.36477038,-0.3600601,-0.35620639,-0.35164668,-0.34789263,-0.3511723
    # ,-0.34981396,-0.34523856,-0.34383607,-0.34193697,-0.33546944,-0.33547351
    # ,-0.33641272,-0.33119408,-0.33133873,-0.32725727,-0.32510018,-0.31865264
    # ,-0.3182856,-0.31256148,-0.31304971,-0.31355287,-0.30778295,-0.3053787
    # ,-0.30755337,-0.30637232,-0.30147719,-0.29663516,-0.29860927,-0.29318353
    # ,-0.29434909,-0.28773794,-0.28996999,-0.28639259,-0.2852181,-0.28406611
    # ,-0.28238887,-0.28037967,-0.28219105,-0.27579564,-0.27608521,-0.27005015
    # ,-0.26832975,-0.26758407,-0.26579751,-0.26201313,-0.26263545,-0.26402586
    # ,-0.25781989,-0.26070908,-0.26026678,-0.25566682,-0.25553497,-0.25448463
    # ,-0.25018939,-0.24553519,-0.24451163,-0.2442431,-0.24008723,-0.23757104
    # ,-0.23449782,-0.22893463,-0.22232795,-0.22099042,-0.2199544,-0.22126274
    # ,-0.21829205,-0.21605742,-0.21440096,-0.21685408,-0.21593501,-0.21595873
    # ,-0.21718976,-0.21856044,-0.21481732,-0.2130514,-0.21141423,-0.20942651
    # ,-0.20573406,-0.20302061,-0.19974965,-0.19714398,-0.19826155,-0.19548965
    # ,-0.19414177,-0.19604377,-0.19666046,-0.19661295,-0.19494166,-0.19453217
    # ,-0.19540617,-0.19377233,-0.19390115,-0.19231232,-0.19180963,-0.18846322
    # ,-0.18928169,-0.18869484,-0.18625162,-0.18384115,-0.18242826,-0.18315456
    # ,-0.1780695,-0.18049217,-0.17838272,-0.18136515,-0.18298035,-0.17758901
    # ,-0.17750761,-0.18062803,-0.17655012,-0.17602079,-0.17578211,-0.17102996
    # ,-0.16950928,-0.16669081,-0.16652385,-0.16815514,-0.16638702,-0.1616337
    # ,-0.16102375,-0.15463747,-0.15101878,-0.14960296,-0.14711524,-0.14551442
    # ,-0.1470009,-0.14573662,-0.14275662,-0.14137144,-0.14294152,-0.14254401
    # ,-0.1458142,-0.14273535,-0.14686921,-0.14797111,-0.15131388]
    # ,[-0.34735257,-0.31489922,-0.31152295,-0.26741403,-0.22996255,-0.3726735
    # ,-0.27680938,-0.30574425,-0.27643244,-0.27637884,-0.30506817,-0.29821656
    # ,-0.28553782,-0.29003491,-0.29629922,-0.30296648,-0.31266053,-0.28230266
    # ,-0.30104532,-0.28150236,-0.29651736,-0.29467355,-0.30482436,-0.29223823
    # ,-0.29388232,-0.27641028,-0.28574607,-0.28963496,-0.2990367,-0.29602272
    # ,-0.30540106,-0.30362651,-0.31035249,-0.31102664,-0.32792295,-0.32778321
    # ,-0.33247276,-0.33078767,-0.33450931,-0.32830483,-0.33307329,-0.33739382
    # ,-0.34182303,-0.33673167,-0.34130466,-0.33847924,-0.34079751,-0.32775396
    # ,-0.33780964,-0.34576956,-0.34368688,-0.34777626,-0.34958283,-0.35644688
    # ,-0.36582092,-0.36711452,-0.3644318,-0.37716119,-0.38154867,-0.38388578
    # ,-0.38569672,-0.38245753,-0.38832627,-0.38879948,-0.38994743,-0.3874571
    # ,-0.38786109,-0.39021366,-0.38950718,-0.39287175,-0.38933045,-0.39523417
    # ,-0.39474229,-0.39812046,-0.3902347,-0.39321388,-0.3945122,-0.39446933
    # ,-0.39331527,-0.39439177,-0.3997504,-0.40691381,-0.4184874,-0.42033391
    # ,-0.42289156,-0.42527288,-0.4264329,-0.42674954,-0.43667695,-0.42568384
    # ,-0.42276182,-0.4250959,-0.41989397,-0.41346279,-0.41157964,-0.41148978
    # ,-0.40554574,-0.40986788,-0.41866773,-0.41183361,-0.41453982,-0.41593528
    # ,-0.42345155,-0.42859559,-0.42546171,-0.42949241,-0.43083946,-0.43140571
    # ,-0.42604395,-0.42138953,-0.42284318,-0.41894993,-0.41820009,-0.4154207
    # ,-0.41510587,-0.41216187,-0.40701311,-0.40574659,-0.40915993,-0.40217378
    # ,-0.40606686,-0.4030426,-0.399482,-0.39476183,-0.39708096,-0.3942065
    # ,-0.39541531,-0.3951123,-0.38962761,-0.39380285,-0.38900037,-0.38611617
    # ,-0.37844244,-0.38150227,-0.37648736,-0.36835998,-0.36100491,-0.35182134
    # ,-0.34736931,-0.34602827,-0.34954108,-0.35192452,-0.35428657,-0.35296211
    # ,-0.35637142,-0.35408158,-0.36495607,-0.3682412,-0.37844439,-0.38700311
    # ,-0.39026855,-0.39400568,-0.4051161,-0.40507186,-0.41321467,-0.41072653
    # ,-0.41397851,-0.41849653,-0.41764178,-0.41001411,-0.40567452,-0.41074848
    # ,-0.40678624,-0.40426513,-0.40707957,-0.40394813,-0.39804525,-0.40113398
    # ,-0.40203303,-0.39832449,-0.39673864,-0.39393359,-0.39518852,-0.39360452
    # ,-0.39346844,-0.39247579,-0.39254931,-0.38693709,-0.38927447,-0.39495456
    # ,-0.39052748,-0.3865198,-0.38858343,-0.38213719,-0.38405199,-0.38585851
    # ,-0.39177681,-0.38139255,-0.3872939,-0.38414341,-0.38530922,-0.38063495
    # ,-0.38206128,-0.37737973,-0.3794787,-0.37419226,-0.37613306,-0.37510763
    # ,-0.3799699,-0.37235518,-0.3729278,-0.37217182,-0.37183966,-0.36836578
    # ,-0.36388147,-0.36126947,-0.35958035,-0.36166466,-0.36025682,-0.35946291
    # ,-0.3578079,-0.35549104,-0.35430461,-0.35406826,-0.35464791,-0.34979396
    # ,-0.34684667,-0.34894846,-0.35109837,-0.34573297,-0.3491111,-0.3515503
    # ,-0.34379121,-0.34738244,-0.34098397,-0.33891729,-0.34277669,-0.34269448
    # ,-0.33859728,-0.33565337,-0.33650303,-0.3293005,-0.33219444,-0.32899212
    # ,-0.32909815,-0.3268699,-0.32069279,-0.3183815,-0.31997535,-0.319555
    # ,-0.31102369,-0.31411669,-0.31278635,-0.31683305,-0.31656292,-0.31653762
    # ,-0.32231133,-0.31870789,-0.32015749,-0.32036578,-0.3188191,-0.31744046
    # ,-0.31339582,-0.31082,-0.30557502,-0.30227611,-0.30258649,-0.29822232
    # ,-0.29449075,-0.29312425,-0.29182589,-0.29155045,-0.29171724,-0.29204774
    # ,-0.29015537,-0.28985653,-0.29231721,-0.286307,-0.29125848,-0.28803946
    # ,-0.29230742,-0.29396386,-0.29209878,-0.29310336,-0.28964254,-0.29062539
    # ,-0.28664637,-0.28999886,-0.28561174,-0.28965124,-0.28662872,-0.28287261
    # ,-0.27781978,-0.28029478,-0.27600429,-0.2744343,-0.27557214,-0.27108547
    # ,-0.27240712,-0.26924916,-0.27285338,-0.27052752,-0.26880228,-0.26721147
    # ,-0.26544416,-0.26238868,-0.25737513,-0.25938942,-0.25555162,-0.25311595
    # ,-0.25437517,-0.25698288,-0.25285571,-0.25035966,-0.25386142,-0.25481746
    # ,-0.25723044,-0.25591608,-0.26104903,-0.26371766,-0.26819996]
    # ,[-0.14277913,-0.13412456,-0.11996951,-0.1289488,-0.12031634,-0.18108839
    # ,-0.15196762,-0.18062315,-0.17712952,-0.18547627,-0.20413811,-0.20463858
    # ,-0.21231313,-0.21851641,-0.2346652,-0.24246771,-0.26108725,-0.24994158
    # ,-0.273465,-0.26481887,-0.28406003,-0.28817593,-0.30509512,-0.29971048
    # ,-0.30784723,-0.30043943,-0.31371653,-0.33029585,-0.34921208,-0.34672898
    # ,-0.3608559,-0.36149941,-0.37036581,-0.3703112,-0.38394015,-0.40123884
    # ,-0.40860916,-0.41379039,-0.42745025,-0.43006366,-0.4431504,-0.46222359
    # ,-0.46522775,-0.48219416,-0.49575194,-0.50370012,-0.51426462,-0.50766679
    # ,-0.52116753,-0.54135396,-0.54712544,-0.5587283,-0.58306665,-0.59816113
    # ,-0.62044376,-0.61892486,-0.62877595,-0.64590596,-0.6616178,-0.67259038
    # ,-0.67631451,-0.68117125,-0.70068403,-0.70925506,-0.71583402,-0.71799315
    # ,-0.71362137,-0.72432975,-0.72619003,-0.72823966,-0.73093784,-0.7356668
    # ,-0.73840811,-0.74789604,-0.73114397,-0.74048287,-0.74358382,-0.7463405
    # ,-0.75058871,-0.75788133,-0.76978373,-0.77830128,-0.79265177,-0.79435929
    # ,-0.80587112,-0.81211479,-0.80913045,-0.81501604,-0.829913,-0.81926203
    # ,-0.81496137,-0.82563297,-0.82248281,-0.8133609,-0.81951286,-0.82429179
    # ,-0.83117057,-0.83115081,-0.85325146,-0.84332793,-0.85069214,-0.85869528
    # ,-0.8686031,-0.88275147,-0.87743585,-0.88515432,-0.88896446,-0.89324828
    # ,-0.88447287,-0.88437677,-0.8884696,-0.88974161,-0.89446304,-0.89393336
    # ,-0.89635402,-0.89486949,-0.88980735,-0.8887303,-0.89295879,-0.88048808
    # ,-0.89047097,-0.8830797,-0.87777476,-0.87589181,-0.86589911,-0.86020374
    # ,-0.85478537,-0.85248741,-0.85762599,-0.84962115,-0.83861388,-0.83050594
    # ,-0.82610204,-0.821317,-0.81990187,-0.82065248,-0.82589206,-0.82245696
    # ,-0.82481171,-0.81977125,-0.82116436,-0.82378606,-0.8252719,-0.82001153
    # ,-0.81907301,-0.81812413,-0.81755169,-0.81479458,-0.80992082,-0.80909435
    # ,-0.80229043,-0.79491872,-0.79680304,-0.79091187,-0.79565441,-0.78998927
    # ,-0.7917821,-0.79470891,-0.79426505,-0.79569729,-0.78615449,-0.7932597
    # ,-0.79537325,-0.79477867,-0.80519442,-0.80416223,-0.80290354,-0.80680379
    # ,-0.80999354,-0.81046962,-0.81102382,-0.81282142,-0.81154349,-0.81185965
    # ,-0.81272983,-0.81410314,-0.81693173,-0.81191325,-0.81515182,-0.82690097
    # ,-0.81987143,-0.81524846,-0.81649173,-0.81501279,-0.81351331,-0.81674757
    # ,-0.82279176,-0.81633737,-0.82143689,-0.82261568,-0.82467925,-0.81904007
    # ,-0.82077945,-0.81675943,-0.81569367,-0.817653,-0.81387997,-0.81397062
    # ,-0.81924154,-0.81616787,-0.81488719,-0.81220131,-0.8189439,-0.81573331
    # ,-0.81664102,-0.81110912,-0.81637326,-0.81570561,-0.81960251,-0.8196808
    # ,-0.82151065,-0.81897226,-0.82340598,-0.82121786,-0.82249407,-0.81935076
    # ,-0.81361645,-0.8170567,-0.8214416,-0.81296453,-0.81718858,-0.82353662
    # ,-0.81118031,-0.81863654,-0.8128172,-0.80921323,-0.81306295,-0.81623154
    # ,-0.81223944,-0.8091497,-0.81373057,-0.80927432,-0.81206879,-0.81208669
    # ,-0.81630105,-0.81461471,-0.80796021,-0.80781312,-0.81395094,-0.8150961
    # ,-0.80513863,-0.80900274,-0.80201887,-0.80723802,-0.80178983,-0.7981812
    # ,-0.80159363,-0.79933856,-0.7957364,-0.79682728,-0.79570361,-0.79741186
    # ,-0.79514509,-0.79759038,-0.79472932,-0.79485202,-0.80078659,-0.79922331
    # ,-0.79475855,-0.79637935,-0.79580748,-0.79549457,-0.79376844,-0.79522102
    # ,-0.79572177,-0.79378445,-0.79955818,-0.78982099,-0.79581263,-0.78817882
    # ,-0.7938431,-0.79471358,-0.79182947,-0.79028085,-0.78542942,-0.78864167
    # ,-0.78110235,-0.78905879,-0.78248314,-0.79221861,-0.79254666,-0.78626907
    # ,-0.78324742,-0.79413189,-0.7882748,-0.79313978,-0.79417666,-0.78995687
    # ,-0.79087524,-0.78801004,-0.79593421,-0.79738782,-0.79607377,-0.79260216
    # ,-0.793454,-0.78537449,-0.77639219,-0.78443116,-0.78042418,-0.77768277
    # ,-0.78248212,-0.78739532,-0.78104072,-0.77603242,-0.78217989,-0.7797066
    # ,-0.78398824,-0.77518908,-0.78074539,-0.78094495,-0.78506635]]
    # internal= np.array(internal)
    # rotation= np.array(rotation)
    # position= np.array(position)
    # line= np.array(line)

    ax = draw_utils.show_scene(real_points_m, internal, rotation, position, line=line)
    cv2.destroyAllWindows()



if __name__ == '__main__':
    try5()



